{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RankNTypes #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE TemplateHaskell       #-}
module Server where 

--
--module Server where
--
--import Prelude ()
--import Prelude.Compat
--
--import Control.Monad.Except
--import Control.Monad.Reader
--import Data.Aeson
--import Data.Aeson.Types
--import Data.Attoparsec.ByteString
--import Data.ByteString (ByteString)
--import Data.List
--import Data.Maybe
--import qualified Data.Map as Map
--import Data.String.Conversions
--import Data.Time.Calendar
--import GHC.Generics
--import Lucid
---- import Network.HTTP.Media ((//), (/:))
--import Network.Wai
--import Network.Wai.Handler.Warp
--import Servant
---- import System.Directory
---- import Text.Blaze
---- import Text.Blaze.Html.Renderer.Utf8
--import Servant.Types.SourceT (source)
--import qualified Data.Aeson.Parser
---- import qualified Text.Blaze.Html
--import Language.Haskell.TH
--import Data.Maybe
--import Data.Aeson.TH
--import Data.Aeson.Types
--
--import Types 
--import qualified Deal as D
--import qualified Asset as P
--import qualified AssetClass.Installment as AC_Installment
--import qualified AssetClass.Mortgage as AC_Mortgage
--import qualified AssetClass.Loan as AC_Loan
--import qualified AssetClass.Lease as AC_Lease
--import qualified Assumptions as AP
--import qualified Cashflow as CF
--import qualified Liability as L
--
--
--data Version = Version 
--  { version :: String 
--  } deriving (Eq, Show, Generic)
--
--instance ToJSON Version
--
--version1 :: Version 
--version1 = Version "0.12.0"
--
--
--data PoolType = MPool (P.Pool AC_Mortgage.Mortgage)
--              | LPool (P.Pool AC_Loan.Loan)
--              | IPool (P.Pool AC_Installment.Installment)
--              | RPool (P.Pool AC_Lease.Lease)
--              deriving(Show)
-- $(deriveJSON defaultOptions ''PoolType)
--
--data RunPoolReq = RunPoolReq {
--   pool :: PoolType
--  ,pAssump :: Maybe AP.ApplyAssumptionType
--} deriving(Show)
-- $(deriveJSON defaultOptions ''RunPoolReq)
--
--data DealType = MDeal (D.TestDeal AC_Mortgage.Mortgage)
--              | LDeal (D.TestDeal AC_Loan.Loan)
--              | IDeal (D.TestDeal AC_Installment.Installment) 
--              | RDeal (D.TestDeal AC_Lease.Lease) 
--
-- $(deriveJSON defaultOptions ''DealType)
--
--data RunDealReq = RunDealReq {
--   deal :: DealType
--  ,assump :: Maybe AP.AssumptionInput
--  ,bondPricing :: Maybe AP.BondPricingInput}
--
-- $(deriveJSON defaultOptions ''RunDealReq)
--
--
--type EngineAPI = "version"  :> Get '[JSON] Version
--            :<|> "runPool" :> ReqBody '[JSON] RunPoolReq :> Post '[JSON] [CF.CashFlowFrame]
--            -- :<|> "runDeal" :> ReqBody '[JSON] RunDealReq :> Post '[JSON] (D.TestDeal a, Maybe CF.CashFlowFrame, Maybe [ResultComponent],Maybe (Map.Map String L.PriceResult))
--            -- :<|> "runDeal" :> ReqBody '[JSON] DealType :> Post '[JSON] (DealType, Maybe CF.CashFlowFrame, Maybe [ResultComponent],Maybe (Map.Map String L.PriceResult))
--            :<|> "runDeal" :> ReqBody '[JSON] DealType :> Post '[JSON] (D.TestDeal , Maybe CF.CashFlowFrame, Maybe [ResultComponent],Maybe (Map.Map String L.PriceResult))
--
--server1 :: Server EngineAPI
--server1 =  showVersion
--      :<|> runPool
--      :<|> runDeal
--    where 
--        showVersion = return version1
--        runPool (RunPoolReq pt passumption) 
--          = return $ 
--              case pt of 
--                MPool p -> D.runPool2 p passumption
--                LPool p -> D.runPool2 p passumption
--                IPool p -> D.runPool2 p passumption
--                RPool p -> D.runPool2 p passumption
--        runDeal (RunDealReq dt assump pricing)
--          = return $ 
--              let 
--                (d,mpcf,mrc,mp) = D.runDeal dt D.DealPoolFlowPricing assump pricing
--              in 
--                case d of 
--                  (D.TestDeal AC_Mortgage.Mortgage) -> ((MDeal d),mpcf,mrc,mp)
--                
--
--engineAPI :: Proxy EngineAPI
--engineAPI = Proxy
--
--app1 :: Application
--app1 = serve engineAPI server1
--
---- type RunAPI = "run" :> QueryParam "type" RunType :> Post '[JSON] []
---- data RunType = Single | Multiple 
---- data RunObject = RunPool | RunDeal
--
--
--main :: IO ()
--main = run 8082  app1
--